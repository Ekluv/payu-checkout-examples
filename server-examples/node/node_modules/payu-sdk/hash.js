const crypto = require('crypto');


function validateParams({
  key,
  salt,
  txnid,
  amount,
  productinfo,
  firstname,
  email,
}) {
  if (typeof key !== 'string') {
    throw new Error('Error: Param "key" required of type String');
  }
  if (typeof salt !== 'string') {
    throw new Error('Error: Param "salt" required of type String');
  }
  if (typeof txnid !== 'string') {
    throw new Error('Error: Param "txnid" required of type String');
  }
  if (typeof amount !== 'string') {
    throw new Error('Error: Param "amount" required of type String');
  }
  if (typeof productinfo !== 'string') {
    throw new Error('Error: Param "productinfo" required of type String');
  }
  if (typeof firstname !== 'string') {
    throw new Error('Error: Param "firstname" required of type String');
  }
  if (typeof email !== 'string') {
    throw new Error('Error: Param "email" required of type String');
  }
}

function generateHash({
  key,
  salt,
  txnid,
  amount,
  productinfo,
  firstname,
  email,
  udf1 = '',
  udf2 = '',
  udf3 = '',
  udf4 = '',
  udf5 = '',
} = {}) {
  validateParams({ key, salt, txnid, amount, productinfo, firstname, email });
  const cryp = crypto.createHash('sha512');
  const text = key+'|'+txnid+'|'+amount+'|'+productinfo+'|'+firstname+'|'+email+'|'+ udf1+'|'+udf2+'|'+udf3+'|'+udf4+'|'+udf5+'||||||'+salt;
  cryp.update(text);
  return cryp.digest('hex');
}

function validateHash(hash, {
  key,
  salt,
  txnid,
  amount,
  productinfo,
  firstname,
  email,
  udf1 = '',
  udf2 = '',
  udf3 = '',
  udf4 = '',
  udf5 = '',
  status,
} = {}) {
  validateParams({ key, salt, txnid, amount, productinfo, firstname, email });
  const keyString = key+'|'+txnid+'|'+amount+'|'+productinfo+'|'+firstname+'|'+email+'|'+udf1+'|'+udf2+'|'+udf3+'|'+udf4+'|'+udf5+'|||||';
  const keyArray = keyString.split('|');
  const reverseKeyArray = keyArray.reverse();
  const reverseKeyString = salt+'|'+status+'|'+reverseKeyArray.join('|');
  const cryp = crypto.createHash('sha512'); 
  cryp.update(reverseKeyString);
  const calchash = cryp.digest('hex');
  return calchash === hash;
}

module.exports = {
  generateHash,
  validateHash,
}
